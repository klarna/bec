%%==============================================================================
%% Type definition for the Merge Strategy structure
%%==============================================================================
-module(bec_merge_strategy_t).

%%==============================================================================
%% Exports
%%==============================================================================
-export([ from_map/1, to_map/1]).

%%==============================================================================
%% Types
%%==============================================================================
-type id() :: 'ff'
            | 'ff-only'
            | 'no-ff'
            | 'squash'
            | 'squash-ff-only'
            | 'rebase-no-ff'
            | 'rebase-ff-only'.
-type strategy() :: #{ id      => id()
                     , enabled := boolean()
                     }.

%%==============================================================================
%% Export Types
%%==============================================================================
-export_type([ id/0
             , strategy/0
             ]).

%%==============================================================================
%% API
%%==============================================================================
-spec from_map(map()) -> strategy().
from_map(#{ <<"id">>      := Id
          , <<"enabled">> := Enabled
          }) ->
  #{ id      => binary_to_atom(Id, utf8)
   , enabled => Enabled
   }.

-spec to_map(strategy()) -> map().
to_map(#{ id      := Id
        , enabled := Enabled
        }) ->
  #{ <<"id">>      => Id
   , <<"enabled">> => Enabled
   }.
